#
# Beginning of 10.3 test
# MDEV-28762: recursive call of some json functions without stack control
#
SET @saved_dbug = @@debug_dbug;
SET debug_dbug='+d,json_check_min_stack_requirement';
SET @json1= '{"key1":{"key1":"val1"}}';
SET @json2= '{"key1":{"key1":"val1"}}';
SELECT JSON_CONTAINS(@json1, @json2);
JSON_CONTAINS(@json1, @json2)
1
SET debug_dbug='+d,temp';
SET @json1= '[1, 2, 3, 4]';
SET @json2= '[5, 6, 7, 8]';
SELECT JSON_MERGE(@json1, @json2);
JSON_MERGE(@json1, @json2)
[1, 2, 3, 4, 5, 6, 7, 8]
SELECT JSON_MERGE_PATCH(@json1, @json2);
JSON_MERGE_PATCH(@json1, @json2)
[5, 6, 7, 8]
SELECT JSON_CONTAINS_PATH('{"a":[{"c":[1,{"a":[0,1,2]},3]}], "b":[1,2,3]}', 'one', "$**.a[2]");
JSON_CONTAINS_PATH('{"a":[{"c":[1,{"a":[0,1,2]},3]}], "b":[1,2,3]}', 'one', "$**.a[2]")
1
SET @j = '["abc", [{"k": "10"}, "def"], {"x":"abc"}, {"y":"bcd"}]';
SELECT JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]');
JSON_SEARCH(@j, 'all', 'abc', NULL, '$[2]')
"$[2].x"
SELECT JSON_EXTRACT('{"key1":"asd", "key2":[2,3]}', "$.key1", "$.key2");
JSON_EXTRACT('{"key1":"asd", "key2":[2,3]}', "$.key1", "$.key2")
["asd", [2, 3]]
SET @schema_array= '{
                     "type":"array",
                     "items": {"type":"number"},
                     "maxItems": 4,
                     "minItems": 2}';
SELECT JSON_SCHEMA_VALID(@schema_array, '[1, 2, 3]');
JSON_SCHEMA_VALID(@schema_array, '[1, 2, 3]')
1
SET @@debug_dbug= @saved_dbug;
#
# End of 10.3 test
#
